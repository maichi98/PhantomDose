from skimage import measure
from pathlib import Path
import nibabel as nib
import pandas as pd
import numpy as np


def convert_nifti_segmentations_to_xyz(dir_segmentations: Path | str) -> pd.DataFrame:
    """
    Convert NIFTI segmentation files to a dataframe of contours described with x, y, z coordinates.

    The function extracts contours from all NIFTI segmentation files generated by TotalSegmentator,
     excluding "skin.nii.gz" and "body.nii.gz".

    :param dir_segmentations: (Path or str) Path to the directory containing the NIFTI segmentation files.
    :return: (pd.DataFrame) Dataframe with the following columns:
                    - ROIName: Name of the ROI, derived from the filename of the NIFTI segmentation file.
                    - ROINumber: Number of the ROI, starting from 1, based on the order of the NIFTI segmentation files.
                    - ROIContourNumber: Number of the contour
                    - ROIContourPointNumber: Number of the point in the contour
                    - x, y, z : Adjusted coordinates of the contour point.
    """
    dir_segmentations = Path(dir_segmentations)

    # List of all segmentation files in the directory, excluding "skin.nii.gz" and "body.nii.gz"
    segmentation_files = [f for f in dir_segmentations.glob('*.nii.gz') if f.name not in ["skin.nii.gz", "body.nii.gz"]]

    # initialize the contours dataframe :
    df_contours = pd.DataFrame()

    # Loop over each nifti segmentation file :
    for segmentation_file in segmentation_files:

        # Load the header, and the 3D matrix of the segmentation :
        nii_segmentation = nib.load(segmentation_file)
        header_segmentation = nii_segmentation.header
        data_segmentation = nii_segmentation.get_fdata()

        # Initialize a counter for the number of contours :
        contour_number = 0

        # loop over each slice in the 3D matrix :
        for slice_number in range(data_segmentation.shape[2]):

            # Find the contours in the current slice :
            slice_segmentation = data_segmentation[:, :, slice_number]
            contours = measure.find_contours(slice_segmentation, 0.5)

            # Loop over every contour :
            for contour in contours:
                contour_number += 1

                df_contour = pd.DataFrame(contour, columns=["x", "y"])

                # Adjust the x, y and z coordinates based on the header information :
                df_contour["x"] -= header_segmentation["qoffset_x"]
                df_contour["y"] += header_segmentation["qoffset_y"]
                df_contour["z"] = (slice_number * header_segmentation["pixdim"][3]) + header_segmentation["qoffset_z"]

                # Add additional information about the ROI :
                df_contour["ROIContourPointNumber"] = 1 + np.arange(len(df_contour))
                df_contour["ROIContourNumber"] = contour_number
                df_contour["ROIName"] = segmentation_file.name.removesuffix(".nii.gz").replace("_", " ")
                df_contour["ROINumber"] = 1 + segmentation_files.index(segmentation_file)

                df_contours = df_contour.copy() if df_contours.empty else pd.concat(
                                                                 [df_contours, df_contour], ignore_index=True)

    # Reorder the columns :
    cols = ["ROIName", "ROINumber", "ROIContourNumber", "ROIContourPointNumber", "x", "y", "z"]
    df_contours = df_contours[cols]

    return df_contours


def convert_dicom_segmentations_to_xyz(dir_segmentations: Path | str) -> pd.DataFrame:
    pass
